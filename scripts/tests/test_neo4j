#!/usr/bin/env bash

function _export_global_variables() {
    local root
    root="$(cd "$(dirname "$(dirname "$(dirname "${BASH_SOURCE[0]}")")")" >/dev/null && pwd)"
    source "$root"/neo4j
}

function _tests() {

    function test_run_manifest_checksums() {
        # Given
        local bin_path
        bin_path=$ROOT_DIR/.data/tmp/hello.txt
        echo "hello" > "$bin_path"
        local test_manifest_path
        test_manifest_path=$(mktemp $ROOT_DIR/.data/tmp/hello-manifest-XXXXXX.txt)

        # When
        _update_manifest "$test_manifest_path" "$bin_path"
        # Then
        _run_manifest_checksums $test_manifest_path || _exit_with_message "Checksums failed after updating the manifest..."

        # When
        echo "tempering the binary" > "$bin_path"
        # Then
        _run_manifest_checksums $test_manifest_path && _exit_with_message "Checksums succeeded after tempering the binary..."
        return 0
    }

    function test_update_manifest_when_missing_binary() {
        # Given
        # TODO: avoid writing to a file if possible
        local stdout_capture
        stdout_capture="$ROOT_DIR"/.data/tmp/update_manifest_when_missing_binary_capture

        # When
        "$ROOT_DIR"/neo4j update_manifest -p neo4j_app single_binary >$stdout_capture \
            && _exit_with_message "Expected manifest to fail because of missing binaries"

        # Then
        local captured
        captured="$(cat $stdout_capture)"
        if ! [[ "$captured" = "Expected 3 binaries found 1" ]]; then _exit_with_message "Unexpected error message: $captured"; fi
    }

    function test_update_manifest_should_fail_when_assets_are_tempered() {
        # Given
        # TODO: avoid writing to a file if possible
        local stdout_capture
        stdout_capture="$ROOT_DIR"/.data/tmp/update_manifest_should_fail_when_assets_are_tempered_capture

        local mocked_asset
        mocked_asset="$ROOT_DIR"/.data/tmp/mocked_asset
        echo "some content" >$mocked_asset

        shasum -a 256 $mocked_asset >"$mocked_asset-manifest.txt"

        # When
        echo "I'm tempering the file" >$mocked_asset

        "$ROOT_DIR"/neo4j update_manifest -p neo4j_app $mocked_asset $mocked_asset $mocked_asset >$stdout_capture \
            && _exit_with_message "Expected manifest to fail because of tempered asset"

        # Then
        local captured
        captured="$(cat $stdout_capture)"
        local expected_error_msg="$ROOT_DIR/.data/tmp/mocked_asset: FAILED"
        if ! [[ "$captured" = "$expected_error_msg" ]]; then _exit_with_message "Unexpected error message: $captured"; fi
    }
}

function _main() {
    set -e
    # Export variables
    _tests
    _export_global_variables

    local test_funcs
    test_funcs=$(declare -f | sed -nr 's@^\s*function\s+(test_[a-zA-Z0-9_]+).*$@\1@p')
    for f in $test_funcs; do
        _print_step "Running $f"
        $f
    done
    echo "All tests succeeded !"
}

_main "$@"
