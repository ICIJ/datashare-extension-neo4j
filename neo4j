#!/usr/bin/env bash

function _export_global_variables() {
    export ROOT_DIR
    ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
    export ES_VERSION
    export PYTHON_APP_DIR="$ROOT_DIR/neo4j-app"
    export NEO4J_APP_BIN="neo4j_app"
    export ELASTICSEARCH_VERSION=7.17.9
    if [ -z "$_ELASTICSEARCH_PORT" ]; then
        export ELASTICSEARCH_PORT="9200"
    else
        export ELASTICSEARCH_PORT=$_ELASTICSEARCH_PORT
    fi
    export NEO4J_VERSION=4.4.17
    export TEST_APP_PORT=8002
    local archi
    archi="$(arch)"
    if [ "$archi" == "aarch64" ] || [ "$archi" == "x86_64" ]; then
        export DOCKER_PLATFORM="linux/amd64"
        export NEO4J_IMAGE="neo4j"
    elif [ "$archi" == "arm64" ]; then
        export DOCKER_PLATFORM="linux/arm64"
        export NEO4J_IMAGE="arm64v8/neo4j"
    else
        exit_with_message "Unsupported architecture $(arch)"
    fi
}

function _helpers() {

    function _array_contains() {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }

    function _build_neo4j_app() {
        _print_step "Building Python app executable"
        cd "$ROOT_DIR"/neo4j-app

        _poetry_shell
        command -v pyinstaller 1>/dev/null 2>&1 || _install_pyinstaller

        local app_dir
        app_dir="$ROOT_DIR"/bins

        local site_packages_path
        site_packages_path=$(poetry run python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')

        pyinstaller neo4j_app/run/run.py \
            --distpath "$app_dir" \
            -F -y \
            --name $NEO4J_APP_BIN \
            --specpath "$app_dir" \
            --log-level=DEBUG \
            -p neo4j_app \
            -p "$site_packages_path"

        local app_bin
        app_bin="$app_dir/$NEO4J_APP_BIN"
        chmod +x "$app_bin"

        local java_resources
        java_resources=$ROOT_DIR/src/main/resources
        echo "Copying neo4j app binary to java extension resources: $java_resources"
        cp "$app_bin" "$java_resources"
    }

    function _docker_build() {
        local target
        target=$1
        docker build --progress=plain --target "$target" -t "$target":latest "${@:2}" .
    }

    function _docker_run() {
        docker run --network="host" "${@}"
    }

    function _install_black() (
        _poetry_shell
        _pip_install install black==23.1.0
    )

    function _install_pyinstaller() (
        echo "Installing pyinstaller..."
        pip install pyinstaller==5.7.0
    )

    function join_by {
        local d=${1-} f=${2-}
        if shift 2; then
            printf %s "$f" "${@/#/$d}"
        fi
    }

    function _pip_install() (
        python -m pip install "$@"
    )

    function _poetry_shell() {
        command -v poetry 1>/dev/null 2>&1 || exit_with_message "Poetry is not installed"

        local venv_path
        venv_path=$(poetry env info -p)

        . "$venv_path"/bin/activate
    }

    function _print_step() {
        echo "##### -> $1"
    }

    function _pytest() {
        poetry run python3 -m pytest --tb=long -vv --cache-clear -s "${@}"
    }

    function _should_run_project() {
        if [ "$PROJECT" = ALL ] || [ "$PROJECT" = "$1" ]; then
            return 0
        else
            return 1
        fi
    }

}

function _commands() {

    function build() {
        if _should_run_project "neo4j_app"; then
            _build_neo4j_app
        elif _should_run_project "neo4j_extension"; then
            _print_step "Building the Python app first"
            _build_neo4j_app
            _print_step "Compiling the java extension"
            cd "$ROOT_DIR"
            mvn validate package -Dmaven.test.skip=true
        else
            exit_with_message "Can't build project $PROJECT"
        fi
    }

    function docker_build() {
        _print_step "Building base docker image..."
        _docker_build base
    }

    function docker_test() {
        if _should_run_project "neo4j_app"; then
            _docker_build base-python
            _docker_run --mount type=bind,source="$ROOT_DIR"/.data,target=/home/dev/.data \
                base-python:latest \
                ./neo4j test -p neo4j_app
        elif _should_run_project "neo4j_app_format"; then
            _docker_build base-python
            _docker_run base-python:latest \
                ./neo4j format_test_python
        elif _should_run_project "neo4j_extension"; then
            _docker_build base-java
            _docker_run base-java:latest \
                ./neo4j test -p neo4j_extension
        elif _should_run_project "neo4j_extension_format"; then
            _docker_build base-java
            # TODO: mount the target dir to do some maven caching ?
            _docker_run base-java:latest \
                ./neo4j format_test_java
        else
            exit_with_message "Can't test project $PROJECT"
        fi
    }

    function format() {
        format_python
    }

    function format_python() {
        # Black
        cd "$PYTHON_APP_DIR"
        _install_black
        black --config pyproject.toml .
    }

    function format_test() {
        format_test_python
        format_test_java
    }

    function format_test_java() {
        cd "$ROOT_DIR"
        mvn validate
        if ! mvn checkstyle:check; then
            exit_with_message "Java source code does not comply with style guidelines.
Please check the README.md to see how to automatically format the code and fix"
        fi
    }

    function format_test_python() {
        cd "$PYTHON_APP_DIR"
        _install_black
        if ! poetry run python3 -m black --config pyproject.toml --check .; then
            exit_with_message "Python project is not properly formatted.
Please run ./neo4j format"
        fi
    }

    function install_poetry() (
        echo "Installing Poetry..."
        # TODO: restrict the python version here
        curl -sSL https://install.python-poetry.org | python3 -
    )

    function run() {
        if [ "$PROJECT" == neo4j_app ]; then
            # TODO: maybe we should run the binary we've copied to the java dir
            "$ROOT_DIR/bins/$NEO4J_APP_BIN"
        else
            exit_with_message "Can't run project $PROJECT"
        fi
    }

    function setup() {
        if _should_run_project "neo4j_app"; then
            _print_step "Setting up neo4j_app"

            command -v poetry 1>/dev/null 2>&1 || echo "poetry is not installed"

            cd "$PYTHON_APP_DIR"
            poetry install --with dev
        else
            exit_with_message "Can't setup project $PROJECT"
        fi
    }

    function start_all_test_services() (
        docker compose up --detach \
            --wait \
            --build \
            test-elasticsearch \
            test-neo4j
    )

    function start_debug_app() (
        cd "$ROOT_DIR"/neo4j-app

        poetry run uvicorn --factory --reload --port "$TEST_APP_PORT" neo4j_app.run.run:debug_app
    )

    function start_test_elasticsearch() (
        docker compose up --wait --build test-elasticsearch
    )

    function start_test_neo4j() (
        docker compose up --build --wait test-neo4j
    )

    function stop_all_test_services() (
        docker compose stop test-elasticsearch test-neo4j
    )

    function stop_test_elasticsearch() (
        docker compose stop test-elasticsearch
    )

    function stop_test_neo4j() (
        docker compose stop test-neo4j
    )

    function test() {
        if _should_run_project "neo4j_app"; then
            cd "$ROOT_DIR"/neo4j-app
            # TODO: parallelize pytest...
            _pytest linting_test.py
            # Here we expect the docker test images to be launched either by the user or the CI
            _pytest neo4j_app

        elif _should_run_project "neo4j_extension"; then
            mvn -X test

        else
            exit_with_message "Can't test project $PROJECT"
        fi
    }
}

function _main() {
    PROJECT=
    PROJECTS=
    _ELASTICSEARCH_PORT=

    # Define sub projects here
    PROJECTS=(
        neo4j_app
        neo4j_app_format
        neo4j_extension
        neo4j_extension_format
    )

    function exit_with_message() {
        echo "$1"
        exit "${2:-1}"
    }

    function _parse_project_flag() {
        local project
        project=$1
        if [ -z "$project" ]; then
            exit_with_message "Empty project flag, please provide one !"
        elif _array_contains "$project" "${PROJECTS[@]}"; then
            PROJECT=$project
        else
            exit_with_message "Unknown project \"$project\", available projects: $(join_by "," "${PROJECTS[@]}")"
        fi
    }

    function _parse_args() {
        # Unless specified we run commands for all projects
        PROJECT=ALL
        if [[ "$#" -ge 2 ]]; then
            for i in $(seq 2 $#); do
                if [[ -z "${SKIP_NEXT_TYPE_ARG}" ]]; then
                    j=$((i + 1))
                    TYPE_ARG="${!i}"
                    VALUE_ARG="${!j}"
                    if [[ "$TYPE_ARG" == "-p" ]]; then
                        _parse_project_flag $VALUE_ARG
                        SKIP_NEXT_TYPE_ARG=true
                    elif [[ "$TYPE_ARG" == "--elasticsearch-port" ]]; then
                        _ELASTICSEARCH_PORT=$VALUE_ARG
                        SKIP_NEXT_TYPE_ARG=true
                    fi
                else
                    unset SKIP_NEXT_TYPE_ARG
                fi
            done
        fi
    }

    set -e
    set +o pipefail  # This is for CircleCI
    # Define helpers and commands
    _helpers
    _commands

    # Parse user command
    _parse_args "$@"

    # Export variables
    _export_global_variables

    if [[ $# == 0 ]]; then
        printf "Error: No command specified\n\n" && exit 1
    # If we manage to find a command previously declared with _commands, run it
    elif declare -f "$1" >/dev/null; then
        "$@"
    else
        printf "Error: Invalid command %s\n\n" "$1" && exit 1
    fi
}

_main "$@"
