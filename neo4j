#!/usr/bin/env bash

function _export_global_variables() {
    export ROOT_DIR
    ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
    export PROJECT_URL=https://github.com/ICIJ/datashare-extension-neo4j
    export DOCKER_HOME=/home/dev
    export PYTHON_APP_DIR="$ROOT_DIR/neo4j-app"
    export NEO4J_APP_BIN="neo4j-app"
    export ELASTICSEARCH_VERSION=7.17.9
    DOCKER_UID="$(id -u)"
    export DOCKER_UID
    DOCKER_GID="$(id -g)"
    export DOCKER_GID
    export ELASTICSEARCH_PORT=9201
    export NEO4J_VERSION=4.4.17
    export TEST_APP_PORT=8002
    BIN_ARCHI="$(arch)"
    if [ "$BIN_ARCHI" == "x86_64" ]; then
        export DOCKER_PLATFORM="linux/amd64"
        export NEO4J_IMAGE="neo4j"
    elif [ "$BIN_ARCHI" == "aarch64" ] || [ "$BIN_ARCHI" == "arm64" ]; then
        # Renormalize the BIN_ARCHI name
        BIN_ARCHI="arm64"
        export DOCKER_PLATFORM="linux/arm64"
        export NEO4J_IMAGE="arm64v8/neo4j"
    else
        exit_with_message "Unsupported architecture $BIN_ARCHI"
    fi
    export BIN_ARCHI

    PLATFORM=$(uname)
    export PLATFORM
    if [ "$PLATFORM" == "Darwin" ]; then
        export BIN_PLATFORM="darwin-universal2"
    elif [ "$PLATFORM" == "Linux" ]; then
        export BIN_PLATFORM="unknown-linux-$BIN_ARCHI"
    else
        exit_with_message "Unsupported platform $PLATFORM"
    fi
}

function _helpers() {

    function _array_contains() {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }

    function _build_neo4j_app() {
        cd "$ROOT_DIR"/neo4j-app
        local groups=
        if [[ -n "$OPENSEARCH_SUPPORT" ]]; then
            groups=" --with opensearch"
        fi
        poetry install$groups
        _poetry_shell
        command -v pyinstaller 1>/dev/null 2>&1 || _install_pyinstaller

        local app_dir
        app_dir="$ROOT_DIR"/bins

        local site_packages_path
        site_packages_path=$(poetry run python -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')

        local app_bin
        app_bin=$(_make_binary_name "$(_print_version)")

        PYTHONHASHSEED=42 PYTHONOPTIMIZE=1 pyinstaller neo4j_app/run/run.py \
            --distpath "$app_dir" \
            -F \
            -y \
            --name "$app_bin" \
            --specpath "$app_dir" \
            -p neo4j_app \
            -p "$site_packages_path"

        chmod +x "$app_dir/$app_bin"
        echo "bins/$app_bin"
    }

    function _check_release_version() {
        local file_version
        file_version=$(head -n 1 "$ROOT_DIR"/version)

        # Source version
        local source_version
        source_version=$("$ROOT_DIR"/neo4j --version)
        if ! [ "$source_version" = "$file_version" ]; then exit_with_message "Source version \"$source_version\" differs from \"$file_version\""; fi

        # Java version
        local java_version
        java_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        if ! [ "$java_version" = "$file_version" ]; then exit_with_message "Java version \"$java_version\" differs from \"$file_version\""; fi

        # Python version
        cd "$ROOT_DIR"/neo4j-app || exit
        local python_version
        python_version=$(poetry version -s)
        if ! [ "$python_version" = "$file_version" ]; then exit_with_message "Python version \"$python_version\" differs from \"$file_version\""; fi

        echo "All versions match !"
    }

    function _docker_build() {
        local target
        target=$1
        DOCKER_BUILDKIT=1 docker build --progress=plain \
            --target "$target" \
            -t "$target":latest \
            "${@:2}" \
            .
    }

    function _docker_run() {
        docker run --mount type=bind,source="$ROOT_DIR"/.data/.cache,target="$DOCKER_HOME"/.cache \
            --mount type=bind,source="$ROOT_DIR"/.data/.m2,target="$DOCKER_HOME"/.m2 \
            --network="host" "${@}"
    }

    function _install_black() (
        _pip_install black==23.1.0
    )

    function _install_pyinstaller() (
        echo "Installing pyinstaller..."
        pip install pyinstaller==5.7.0
    )

    function _join_by {
        local d=${1-} f=${2-}
        if shift 2; then
            printf %s "$f" "${@/#/$d}"
        fi
    }

    function _make_binary_name() {
        local version
        version=$1
        if [ -z "$version" ]; then exit_with_message "Empty version !"; fi
        echo "$NEO4J_APP_BIN-$BIN_PLATFORM-$version"
    }

    function _pip_install() (
        poetry run python3 -m pip install "$@"
    )

    function _poetry_shell() {
        command -v poetry 1>/dev/null 2>&1 || exit_with_message "Poetry is not installed"

        local venv_path
        venv_path=$(poetry env info -p)

        . "$venv_path"/bin/activate
    }

    function _print_step() {
        printf "\n##### -> %s" "$1"
    }
    
    function _print_version() (
        cat "$ROOT_DIR"/version
    )

    function _publish_neo4j_app() {
        local version
        version=$(_print_version)

        _run_manifest_checksums
        local binaries
        binaries=(sed -nr "s@.*($NEO4J_APP_BIN-.+-$version).*@\1@p" "$ROOT_DIR"/src/main/resources/manifest.txt)
        for binary in "${binaries[@]}";do
            local filename
            filename=$(basename -- "$binary")

            curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                https://uploads.github.com/repos/ICIJ/datashare-extension-neo4j/releases/"$version"/assets?name="$filename" \
                --data-binary "@$binary"
        done
    }

    function _pytest() {
        poetry run python3 -m pytest --cache-clear -s "${@}"
    }

    function _run_manifest_checksums() {
        if shasum -a 256 -c "$ROOT_DIR"/src/main/resources/manifest.txt; then return 0; else return 1; fi
    }

    function _should_run_project() {
        if [ "$PROJECT" = ALL ] || [ "$PROJECT" = "$1" ]; then
            return 0
        else
            return 1
        fi
    }

    function _update_manifest() {
        local bin_path
        bin_path=$1
        if [ -z "$bin_path" ]; then exit_with_message "Can't update manifest with an empty asset name !"; fi

        local manifest_path
        manifest_path="$ROOT_DIR"/src/main/resources/manifest.txt
        shasum -a 256 "$bin_path" >>"$manifest_path"
    }

}

function _commands() {

    function build() {
        if _should_run_project "neo4j_app"; then
            if [ -z "$PRINT_SHA" ]; then _print_step "Building Python app executable";fi
            local bin_path
            bin_path=$(_build_neo4j_app)
            if [ -n "$PRINT_SHA" ]; then
                shasum -a 256 "$bin_path"
            fi
        elif _should_run_project "neo4j_extension"; then
            _print_step "Building the Python app first"
            local bin_name
            bin_name=$(_build_neo4j_app)

            _print_step "Copying neo4j app binary to java extension"
            local java_resources
            java_resources=$ROOT_DIR/src/main/resources

            # TODO: for now we rename the platform specific binary into a generic one which loaded by the extension
            #  later the extension will DL binaries
            cp "$ROOT_DIR"/bins/"$bin_name" "$java_resources"/$NEO4J_APP_BIN
            echo Copied binary from "$app_bin" to "$java_resources"

            _print_step "Compiling the java extension"
            cd "$ROOT_DIR"
            mvn validate package -Dmaven.test.skip=true
        else
            exit_with_message "Can't build project $PROJECT"
        fi
    }

    function docker_build() {
        _print_step "Building base docker image..."
        _docker_build base
    }

    function docker_build_test_services() {
        _print_step "Building test services images..."
        _docker_build neo4j
        _docker_build elasticsearch
    }

    function docker_test() {
        if _should_run_project "neo4j_app"; then
            _docker_build base-python
            _docker_run base-python:latest ./neo4j setup -p neo4j_app
            _docker_run --mount type=bind,source="$ROOT_DIR"/.data/neo4j,target="$DOCKER_HOME"/.data/neo4j \
                base-python:latest \
                ./neo4j test -p neo4j_app
        elif _should_run_project "neo4j_app_format"; then
            _docker_build base-python
            _docker_run base-python:latest ./neo4j setup -p neo4j_app
            _docker_run base-python:latest ./neo4j format_test_python
        elif _should_run_project "neo4j_extension"; then
            _docker_build base-java
            _docker_run base-java:latest ./neo4j test -p neo4j_extension
        elif _should_run_project "neo4j_extension_format"; then
            _docker_build base-java
            # TODO: mount the target dir to do some maven caching ?
            _docker_run base-java:latest ./neo4j format_test_java
        elif _should_run_project "neo4j_script"; then
            _docker_build base-script
            _docker_run base-script:latest ./neo4j test -p neo4j_script
        elif _should_run_project "release_version"; then
            _docker_build base-script
            _docker_run base-script:latest ./neo4j test -p release_version
        else
            exit_with_message "Can't test project $PROJECT"
        fi
    }

    function format() {
        format_python
    }

    function format_python() {
        # Black
        cd "$PYTHON_APP_DIR"
        _install_black
        black --config pyproject.toml .
    }

    function format_test() {
        format_test_python
        format_test_java
    }

    function format_test_java() {
        _print_step "Testing java formatting..."
        cd "$ROOT_DIR"
        mvn validate
        if ! mvn checkstyle:check; then
            exit_with_message "Java source code does not comply with style guidelines.
Please check the README.md to see how to automatically format the code and fix"
        fi
    }

    function format_test_python() {
        _print_step "Testing python formatting..."
        cd "$PYTHON_APP_DIR"
        _install_black
        if ! poetry run python3 -m black --config pyproject.toml --check .; then
            exit_with_message "Python project is not properly formatted.
Please run ./neo4j format"
        fi
        echo "Python format test succeeded !"
    }

    function install_poetry() (
        local poetry_home
        poetry_home=$1
        if [ -z "$poetry_home" ]; then exit_with_message "Missing poetry_home !"; fi
        echo "Installing Poetry to $poetry_home..."
        curl -sSL https://install.python-poetry.org | POETRY_HOME=$poetry_home python3 -
        export PATH="$poetry_home/bin:$PATH"
    )

    function is_publishable() {
        _check_release_version
    }

    function publish() {
        if _should_run_project "neo4j_app"; then
            _publish_neo4j_app
        else
            exit_with_message "Can't pre-publish project $PROJECT"
        fi
    }

    function run() {
        if _should_run_project "neo4j_app"; then
            # TODO: maybe we should run the binary we've copied to the java dir
            "$ROOT_DIR/bins/$NEO4J_APP_BIN"
        else
            exit_with_message "Can't run project $PROJECT"
        fi
    }

    function set_version() {
        # Update root file
        local file_version
        file_version=$1
        if [ -z "$file_version" ]; then exit_with_message "Empty version !"; fi
        echo "$file_version" >"$ROOT_DIR"/version

        cd "$PYTHON_APP_DIR"
        _pip_install tomlkit==0.11.6
        poetry run python "$ROOT_DIR"/scripts/update_versions.py
    }

    function setup() {
        if _should_run_project "build_env"; then
            if [ "$PLATFORM" == "Darwin" ]; then
                "$ROOT_DIR"/.circleci/setup/darwin
            elif [ "$PLATFORM" == "Linux" ]; then
                echo "N"
            else
                exit_with_message "Unknown platform $PLATFORM"
            fi
        elif _should_run_project "neo4j_app"; then
            _print_step "Setting up neo4j_app"

            command -v poetry 1>/dev/null 2>&1 || echo "poetry is not installed"

            cd "$PYTHON_APP_DIR"
            poetry install --with dev
            echo "Python setup succeeded !"
        else
            exit_with_message "Can't setup project $PROJECT"
        fi
    }

    function start_all_test_services() (
        docker compose up --detach \
            --wait \
            --build \
            test-elasticsearch \
            test-neo4j
    )

    function start_debug_app() (
        cd "$ROOT_DIR"/neo4j-app

        poetry run uvicorn --factory --reload --port "$TEST_APP_PORT" neo4j_app.run.run:debug_app
    )

    function start_test_elasticsearch() (
        docker compose up --wait --build test-elasticsearch
    )

    function start_test_neo4j() (
        docker compose up --build --wait test-neo4j
    )

    function stop_all_test_services() (
        docker compose stop test-elasticsearch test-neo4j
    )

    function stop_test_elasticsearch() (
        docker compose stop test-elasticsearch
    )

    function stop_test_neo4j() (
        docker compose stop test-neo4j
    )

    function test() {
        if _should_run_project "neo4j_app"; then
            cd "$ROOT_DIR"/neo4j-app
            # TODO: parallelize pytest...
            _pytest linting_test.py
            # Here we expect the docker test images to be launched either by the user or the CI
            _pytest neo4j_app

        elif _should_run_project "neo4j_extension"; then
            mvn -X test

        elif _should_run_project "neo4j_script"; then
            for file in "$ROOT_DIR"/scripts/tests/test_*; do
                "$file"
            done
        elif _should_run_project "release_version"; then
            _check_release_version
        else
            exit_with_message "Can't test project $PROJECT"
        fi
    }

    function update_manifest() {
        if _should_run_project "neo4j_app"; then
            if ! [ $# -ne 3 ]; then exit_with_message "Expected 3 binaries found $#";fi
            for binary in "$@";do
                local manifest_path
                manifest_path="$binary"-manifest.txt
                shasum -a 256 -c "$manifest_path"
                _update_manifest "$binary"
            done
        else
            exit_with_message "Can't pre-publish project $PROJECT"
        fi
    }
}

function _main() {
    PROJECT=
    PROJECTS=
    OPENSEARCH_SUPPORT=
    PRINT_VERSION=
    PRINT_SHA=

    # Define sub projects here
    PROJECTS=(
        neo4j_app
        neo4j_app_format
        neo4j_extension
        neo4j_extension_format
        neo4j_script
        release_version
    )

    function exit_with_message() {
        echo "$1"
        exit "${2:-1}"
    }

    function _parse_project_flag() {
        local project
        project=$1
        if [ -z "$project" ]; then
            exit_with_message "Empty project flag, please provide one !"
        elif _array_contains "$project" "${PROJECTS[@]}"; then
            PROJECT=$project
        else
            exit_with_message "Unknown project \"$project\", available projects: $(_join_by "," "${PROJECTS[@]}")"
        fi
    }

    function _parse_args() {
        # Unless specified we run commands for all projects
        PROJECT=ALL
        if [[ "$#" -ge 2 ]]; then
            for i in $(seq 2 $#); do
                if [[ -z "${SKIP_NEXT_TYPE_ARG}" ]]; then
                    j=$((i + 1))
                    TYPE_ARG="${!i}"
                    VALUE_ARG="${!j}"
                    if [[ "$TYPE_ARG" == "-p" ]]; then
                        _parse_project_flag $VALUE_ARG
                        SKIP_NEXT_TYPE_ARG=true
                    elif [[ "$TYPE_ARG" == "--opensearch-support" ]]; then
                        OPENSEARCH_SUPPORT=true
                    elif [[ $TYPE_ARG = "--sha" ]]; then
                        PRINT_SHA=1
                    fi
                else
                    unset SKIP_NEXT_TYPE_ARG
                fi
            done
        elif [[ "$#" == 1 ]]; then
            if [[ "$1" == "--version" ]]; then
                PRINT_VERSION=1
            fi
        fi

    }

    set -e
    set +o pipefail # This is for CircleCI
    # Define helpers and commands
    _helpers
    _commands

    # Parse user command
    _parse_args "$@"

    # Export variables
    _export_global_variables
    if [ "${BASH_SOURCE[0]}" -ef "$0" ]; then
        if [[ $# == 0 ]]; then
            printf "Error: No command specified\n\n" && exit 1
        # If we manage to find a command previously declared with _commands, run it
        elif [ -n "$PRINT_VERSION" ]; then
            _print_version
        elif declare -f "$1" >/dev/null; then
            "$@"
        else
            printf "Error: Invalid command %s\n\n" "$1" && exit 1
        fi
    fi
}

_main "$@"
