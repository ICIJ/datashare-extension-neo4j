version: 2.1

parameters:
  release_all:
    description: Release all assets
    type: boolean
    default: false
  release_backend:
    description: Release the backend
    type: boolean
    default: false
  release_graph_widget_plugin:
    description: Release the graph widget plugin
    type: boolean
    default: false
  branch:
    description: >
      Branch to release (the last commit will be used, if a new one occurs during the release, it will probably
      fail...)
    type: string
    default: main

executors:
  docker-machine:
    machine:
      image: ubuntu-2204:2024.04.4
      docker_layer_caching: true
  unknown-linux:
    machine:
      image: ubuntu-2004:2024.04.4
  darwin-universal2:
    macos:
      xcode: 14.2.0
  frontend:
    docker:
      - image: cimg/node:18.20.3

commands:
  build-graph-widget-plugin-cmd:
    description: Build the graph widget plugin
    parameters:
      branch:
        type: string
    steps:
      - checkout-code:
          revision: << parameters.branch >>
      # Fail early
      - check-is-latest-commit:
          branch: << parameters.branch >>
      - run:
          name: Perform sanity checks
          command: |
            cd datashare-extension-neo4j
            ./neo4j is_publishable -p neo4j_graph_widget_plugin
      - restore_cache:
          name: Restore yarn package cache
          keys:
            - v4-deps-graph-widget-plugin-{{ checksum "datashare-extension-neo4j/plugins/neo4j-graph-widget/yarn.lock" }}
            - v4-deps-graph-widget-plugin # used if checksum fails
      - run:
          name: Build binary
          command: |
            cd datashare-extension-neo4j
            ./neo4j setup -p neo4j_graph_widget_plugin
            ./neo4j build -p neo4j_graph_widget_plugin
      - persist_to_workspace:
          root: datashare-extension-neo4j/bins
          paths:
            - datashare-plugin-neo4j-graph-widget-*
      - save_cache:
          when: always
          paths:
            - ~/.cache/yarn
          key: v4-deps-graph-widget-plugin-{{ checksum "datashare-extension-neo4j/plugins/neo4j-graph-widget/yarn.lock" }}

  build-python-binary:
    description: Build neo4j_app Python binary
    parameters:
      branch:
        type: string
    steps:
      - checkout-code:
          revision: << parameters.branch >>
      # TODO: cache apt
      - run:
          name: Setting up environment
          # TODO: remove the source ~/.bashrc is not needed
          # We make a separate cache dir to avoid conflict with docker
          command: |
            cd datashare-extension-neo4j
            ./neo4j setup -p build_env
            echo "export PATH=\"`python3 -m site --user-base`/bin:\$PATH\"" >> ~/.bashrc
            source ~/.bashrc
            echo "export PATH=$CIRCLE_WORKING_DIRECTORY/datashare-extension-neo4j/.poetry/bin:$PATH" >> "$BASH_ENV"
            source "$BASH_ENV"
            mkdir $CIRCLE_WORKING_DIRECTORY/datashare-extension-neo4j/.cache
            poetry config cache-dir $CIRCLE_WORKING_DIRECTORY/datashare-extension-neo4j/.cache
      # This has to be done after installing poetry
      - run:
          name: Perform sanity checks
          command: |
            cd datashare-extension-neo4j
            ./neo4j is_publishable -p neo4j_app
            ./neo4j is_publishable -p neo4j_extension
      # Fail early
      - check-is-latest-commit:
          branch: << parameters.branch >>
      - run:
          name: Build binary
          command: |
            cd datashare-extension-neo4j
            ./neo4j setup -p neo4j_app
            ./neo4j build -p neo4j_app --sha >bins/"$(./neo4j binary_name -p neo4j_app)-manifest.txt"
      # TODO: store_artifacts here if it helps debugging
      - persist_to_workspace:
          root: datashare-extension-neo4j/bins
          paths:
            - neo4j-app-*

  checkout-code:
    description: "Checkout code"
    parameters:
      revision:
        type: string
    steps:
      - run: |
          if ! [[ -f ~/.ssh/known_hosts ]]; then 
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
          fi
          if [[ -z $(cat  ~/.ssh/known_hosts | grep github.com) ]]; then
            ssh-keyscan github.com >> ~/.ssh/known_hosts
          fi
          if [[ ! -d datashare-extension-neo4j ]]; then git clone git@github.com:ICIJ/datashare-extension-neo4j.git; fi
          cd datashare-extension-neo4j
          git checkout << parameters.revision >>

  check-is-latest-commit:
    description: "Checking that no commit was made later on the same branch"
    parameters:
      branch:
        type: string
    steps:
      - run: |
          cd datashare-extension-neo4j
          git fetch
          current_commit="$(git rev-parse HEAD)"
          last_commit="$(git log -1 --pretty=%H -n 1 origin/<< parameters.branch >>)"
          if ! [[ "$current_commit" = "$last_commit" ]];then
            echo "$current_commit is not the last commit on << parameters.branch >>" && exit 1
          fi

  create-and-push-tag:
    description: "Create and push tag"
    steps:
      - run:
          command: |
            cd datashare-extension-neo4j
            tag=$(./neo4j --version)
            git tag "$tag"
            git push origin "$tag"

jobs:
  build:
    executor: docker-machine
    steps:
      - checkout
      - when:
          condition:
            or:
              - matches:
                  pattern: "^release/.*$"
                  value: << pipeline.git.branch >>
              - << pipeline.git.tag >>
          steps:
            - run:
                name: Test release version
                command: ./neo4j docker_test -p release_version
      - run:
          name: Build
          command: ./neo4j docker_build -p base

  build-darwin-universal2-binary:
    executor: darwin-universal2
    parameters:
      branch:
        type: string
    steps:
      - checkout-code:
          revision: << parameters.branch >>
      - build-python-binary:
          branch: << parameters.branch >>

  build-graph-widget-plugin:
    executor: frontend
    parameters:
      branch:
        type: string
    steps:
      - build-graph-widget-plugin-cmd:
          branch: << parameters.branch >>

  # We build test services to benefit from caching, using docker-compose up directly doesn't seem to benefit from it
  build-test-services:
    executor: docker-machine
    steps:
      - checkout
      - run:
          name: Build external services
          command: ./neo4j docker_build_test_services

  build-unknown-linux-python-binary:
    executor: unknown-linux
    parameters:
      branch:
        type: string
      resource_cls:
        type: string
    resource_class: << parameters.resource_cls >>
    steps:
      - checkout-code:
          revision: << parameters.branch >>
      - build-python-binary:
          branch: << parameters.branch >>

  publish-backend-binaries:
    parameters:
      branch:
        type: string
    executor: unknown-linux
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout-code:
          revision: << parameters.branch >>
      # Try to fail early in  case another commit happened
      - check-is-latest-commit:
          branch: << parameters.branch >>
      - run:
          name: Publish backend assets to GH release
          command: |
            cd datashare-extension-neo4j
            tag=$(./neo4j --version)
            ls /tmp/workspace/neo4j-app-*-"$tag"* | tr '\n' '\0' | xargs -0 -I {} cp {} bins
            binaries=( $(ls bins/neo4j-app-*-$tag) )
            ./neo4j update_manifest -p neo4j_app "${binaries[@]}"
            git add src/main/resources/manifest.txt
            git commit -m "release: updating manifest.txt for $tag"
            git tag "$tag"
            git push origin "$tag"
            git push
            ./neo4j publish -p neo4j_app --create-release
            ./neo4j build -p neo4j_extension
            ./neo4j publish -p neo4j_extension

  publish-graph-widget-plugin-binaries:
    parameters:
      branch:
        type: string
      create_tag:
        type: boolean
    executor: frontend
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout-code:
          revision: << parameters.branch >>
      # Try to fail early in  case another commit happened
      - check-is-latest-commit:
          branch: << parameters.branch >>
      - when:
          condition: <<parameters.create_tag>>
          steps:
            - create-and-push-tag
      - run:
          name: Publish graph widget plugin assets to GH release
          # We rebuild everything here since it's really quick, we could have copied the tar
          command: |
            cd datashare-extension-neo4j
            tag=$(./neo4j --version)
            cp /tmp/workspace/datashare-plugin-neo4j-graph-widget-"$tag".tgz bins
            ./neo4j publish -p neo4j_graph_widget_plugin --create-release

  test-script:
    executor: docker-machine
    steps:
      - checkout
      - run:
          name: neo4j script tests
          command: ./neo4j docker_test -p neo4j_script

  test-java:
    executor: docker-machine
    steps:
      - checkout
      - restore_cache:
          key: v4-deps-java-{{ checksum "pom.xml" }}
      - run:
          name: Java format tests
          command: ./neo4j docker_test -p neo4j_extension_format
      - run:
          name: Java tests
          command: ./neo4j docker_test -p neo4j_extension
      - save_cache:
          key: v4-deps-java-{{ checksum "pom.xml" }}
          when: always
          paths:
            - /home/circleci/projects/datashare-extension-neo4j/.data/.m2

  test-python:
    executor: docker-machine
    steps:
      - checkout
      # On the Python side reusing the older virtualenv will speed up the build
      - restore_cache:
          key: v4-deps-python-{{ checksum "neo4j-app/poetry.lock" }}
      - run:
          name: Python format tests
          command: ./neo4j docker_test -p neo4j_app_format
      - run:
          name: Starting tests services
          command: ./neo4j start_all_test_services
      - run:
          name: Python tests
          command: ./neo4j docker_test -p neo4j_app
      - save_cache:
          key: v4-deps-python-{{ checksum "neo4j-app/poetry.lock" }}
          when: always
          paths:
            - /home/circleci/projects/datashare-extension-neo4j/.data/.cache

workflows:
  version: 2

  build_and_test:
    when:
      not:
        or:
          - << pipeline.parameters.release_all >>
          - << pipeline.parameters.release_backend >>
          - << pipeline.parameters.release_graph_widget_plugin >>
    jobs:
      - build
      - build-test-services
      - test-script:
          requires:
            - build
      - test-java:
          requires:
            - build
      - test-python:
          requires:
            - build
            - build-test-services

  release-all:
    when: << pipeline.parameters.release_all >>
    jobs:
      - build-unknown-linux-python-binary:
          matrix:
            parameters:
              resource_cls: [ medium, arm.medium ]
              branch: [ << pipeline.parameters.branch >> ]
      - build-darwin-universal2-binary:
          branch: << pipeline.parameters.branch >>
      - build-graph-widget-plugin:
          branch: << pipeline.parameters.branch >>
      - publish-backend-binaries:
          branch: << pipeline.parameters.branch >>
          requires:
            - build-unknown-linux-python-binary
            - build-darwin-universal2-binary
      - publish-graph-widget-plugin-binaries:
          branch: << pipeline.parameters.branch >>
          create_tag: false
          requires:
            - build-graph-widget-plugin
            # We need to create the tag during the backend creation since it will update the manifest of Python
            #  binaries and create a tag + release from there
            - publish-backend-binaries

  release-backend:
    when: << pipeline.parameters.release_backend >>
    jobs:
      - build-unknown-linux-python-binary:
          matrix:
            parameters:
              resource_cls: [ medium, arm.medium ]
              branch: [ << pipeline.parameters.branch >> ]
      - build-darwin-universal2-binary:
          branch: << pipeline.parameters.branch >>
      - publish-backend-binaries:
          branch: << pipeline.parameters.branch >>
          requires:
            - build-unknown-linux-python-binary
            - build-darwin-universal2-binary

  release-graph-widget-plugin:
    when: << pipeline.parameters.release_graph_widget_plugin >>
    jobs:
      - build-graph-widget-plugin:
          branch: << pipeline.parameters.branch >>
      - publish-graph-widget-plugin-binaries:
          branch: << pipeline.parameters.branch >>
          create_tag: true
          requires:
            - build-graph-widget-plugin
