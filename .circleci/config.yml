version: 2.1

executors:
  docker-machine:
    machine:
      image: ubuntu-2204:2023.02.1
      docker_layer_caching: true

jobs:
  build:
    executor: docker-machine
    steps:
      - checkout
      - run:
          name: Build
          command: ./neo4j docker_build

  # We build test services to benefit from caching, using docker-compose up directly doesn't seem to benefit from it
  build-test-services:
    executor: docker-machine
    steps:
      - checkout
      - run:
          name: Build external services
          command: ./neo4j docker_build_test_services

  test-java:
    executor: docker-machine
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-java-{{ checksum "pom.xml" }}
      - run:
          name: Java format tests
          command: ./neo4j docker_test -p neo4j_extension_format
      - run:
          name: Java tests
          command: ./neo4j docker_test -p neo4j_extension
      - save_cache:
          key: v1-deps-java-{{ checksum "pom.xml" }}
          when: always
          paths:
            .data/.m2

  test-python:
    executor: docker-machine
    steps:
      - checkout
      # On the Python side reusing the older virtualenv will speedup the build
      - restore_cache:
          key: v1-deps-python-{{ checksum "neo4j-app/poetry.lock" }}
      - run:
          name: Python format tests
          command: ./neo4j docker_test -p neo4j_app_format
      - run:
          name: Starting tests services
          command: ./neo4j start_all_test_services
      - run:
          name: Python tests
          command: ./neo4j docker_test -p neo4j_app
      - save_cache:
          key: v1-deps-python-{{ checksum "neo4j-app/poetry.lock" }}
          when: always
          paths:
            .data/.cache

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - build-test-services
      - test-java:
          requires:
            - build
      - test-python:
          requires:
            - build
            - build-test-services
